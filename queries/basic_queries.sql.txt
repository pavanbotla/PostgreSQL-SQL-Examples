-- Drop tables if they already exist
DROP TABLE IF EXISTS df, df1, cust, prod;

-- Create main dataset table
CREATE TABLE df (
    id SERIAL PRIMARY KEY,
    tdate DATE,
    amount NUMERIC(10,2),
    category VARCHAR(50),
    product VARCHAR(50),
    spendby VARCHAR(10)
);

-- Insert data into df
INSERT INTO df (id, tdate, amount, category, product, spendby) VALUES
(0, '2011-06-26', 300.4, 'Exercise', 'GymnasticsPro', 'cash'),
(1, '2011-05-26', 200.0, 'Exercise Band', 'Weightlifting', 'credit'),
(2, '2011-06-01', 300.4, 'Exercise', 'Gymnastics Pro', 'cash'),
(3, '2011-06-05', 100.0, 'Gymnastics', 'Rings', 'credit'),
(4, '2011-12-17', 300.0, 'Team Sports', 'Field', 'cash'),
(5, '2011-02-14', 200.0, 'Gymnastics', NULL, 'cash'),
(6, '2011-06-05', 100.0, 'Exercise', 'Rings', 'credit'),
(7, '2011-12-17', 300.0, 'Team Sports', 'Field', 'cash'),
(8, '2011-02-14', 200.0, 'Gymnastics', NULL, 'cash');

-- Create df1 table
CREATE TABLE df1 (
    id SERIAL PRIMARY KEY,
    tdate DATE,
    amount NUMERIC(10,2),
    category VARCHAR(50),
    product VARCHAR(50),
    spendby VARCHAR(10)
);

-- Insert data into df1
INSERT INTO df1 (id, tdate, amount, category, product, spendby) VALUES
(4, '2011-12-17', 300.0, 'Team Sports', 'Field', 'cash'),
(5, '2011-02-14', 200.0, 'Gymnastics', NULL, 'cash'),
(6, '2011-02-14', 200.0, 'Winter', NULL, 'cash'),
(7, '2011-02-14', 200.0, 'Winter', NULL, 'cash');

-- Create customer table
CREATE TABLE cust (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50)
);

-- Insert customer data
INSERT INTO cust (id, name) VALUES
(1, 'raj'),
(2, 'ravi'),
(3, 'sai'),
(5, 'rani');

-- Create product table
CREATE TABLE prod (
    id SERIAL PRIMARY KEY,
    product VARCHAR(50)
);

-- Insert product data
INSERT INTO prod (id, product) VALUES
(1, 'mouse'),
(3, 'mobile'),
(7, 'laptop');


-- Retrieve all data from df
SELECT * FROM df;

-- Retrieve id, tdate from df ordered by id
SELECT id, tdate FROM df ORDER BY id;

-- Retrieve records where category = 'Exercise'
SELECT id, tdate, category FROM df WHERE category = 'Exercise' ORDER BY id;

-- Filter by category and spendby
SELECT id, tdate, category, spendby FROM df WHERE category = 'Exercise' AND spendby = 'cash';

-- Using LIKE to find Gymnastics-related products
SELECT * FROM df WHERE product LIKE '%Gymnastics%';

-- Fetch all records excluding 'Exercise' category
SELECT * FROM df WHERE category <> 'Exercise';

-- Get all records excluding specific categories
SELECT * FROM df WHERE category NOT IN ('Exercise', 'Gymnastics');

-- Fetch records where product is NULL
SELECT * FROM df WHERE product IS NULL;

-- Find max and min id
SELECT MAX(id) FROM df;
SELECT MIN(id) FROM df;

-- Count total records
SELECT COUNT(*) FROM df;

-- Add a status column based on spendby
SELECT *, CASE WHEN spendby = 'cash' THEN 1 ELSE 0 END AS status FROM df;

-- Concatenate id and category
SELECT CONCAT(id, '-', category) AS concat FROM df;

-- Concatenate multiple columns
SELECT CONCAT_WS('-', id, category, product) AS concat FROM df;

-- Convert category to lowercase
SELECT category, LOWER(category) FROM df;

-- Ceiling and rounding functions
SELECT amount, CEIL(amount) FROM df;
SELECT amount, ROUND(amount) FROM df;

-- Handling NULLs with COALESCE
SELECT COALESCE(product, 'NA') FROM df;

-- Trim whitespace from product column
SELECT TRIM(product) FROM df;

-- Get distinct category and spendby combinations
SELECT DISTINCT category, spendby FROM df;

-- Substring functions
SELECT SUBSTRING(TRIM(product) FROM 1 FOR 10) FROM df;
SELECT SPLIT_PART(category, ' ', 1) AS spl FROM df;

-- UNION and UNION ALL queries
SELECT * FROM df UNION ALL SELECT * FROM df1;
SELECT * FROM df UNION SELECT * FROM df1 ORDER BY id;